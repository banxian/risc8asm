name: macOS Universal Build with PGO

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Xcode
        run: |
          sudo xcode-select --switch /Applications/Xcode.app
          clang --version

      - name: Build with PGO
        run: |
          # Set compiler flags
          CFLAGS="-std=c99 -Wno-multichar -O3"
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            CFLAGS="$CFLAGS -arch arm64"
          else
            CFLAGS="$CFLAGS -arch x86_64"
          fi
          
          # First build with instrumentation
          echo "Building instrumented version..."
          xcrun clang $CFLAGS -fprofile-instr-generate asm53b.c -o asm53b
          
          # Define assembly files for profiling
          ASM_FILES=("RGB1W.ASM" "PIOC_IIC.ASM" "PIOC_Single_Wire.ASM" "PIOC_UART.ASM")
          
          # Run with instrumentation to collect profile data
          export LLVM_PROFILE_FILE="code-%p.profraw"
          for file in "${ASM_FILES[@]}"; do
            if [ -f "profiling_materials/$file" ]; then
              echo "Processing $file for profiling..."
              ./asm53b "profiling_materials/$file"
            fi
          done
          
          # Merge profile data
          echo "Merging profile data..."
          xcrun llvm-profdata merge -output=code.profdata code-*.profraw
          
          # Rebuild using profile data with arch-specific output name
          echo "Building optimized version..."
          xcrun clang $CFLAGS -fprofile-instr-use=code.profdata asm53b.c -o "asm53b.${{ matrix.arch }}"
          
          # Generate binaries with optimized version and verify against official bins
          echo "Generating binaries and verifying..."
          for file in "${ASM_FILES[@]}"; do
            if [ -f "profiling_materials/$file" ]; then
              echo "Processing $file with optimized binary..."
              ./asm53b.${{ matrix.arch }} "profiling_materials/$file"
              
              # Get base name without extension and add .BIN
              base_name=$(basename "${file%.*}")
              gen_bin="${base_name}.BIN"
              
              if [ -f "$gen_bin" ]; then
                if [ -f "profiling_materials/official_bins/$gen_bin" ]; then
                  if cmp -s "$gen_bin" "profiling_materials/official_bins/$gen_bin"; then
                    echo "✅ $gen_bin matches official bin"
                  else
                    echo "❌ $gen_bin differs from official bin:"
                    cmp "$gen_bin" "profiling_materials/official_bins/$gen_bin" || true
                  fi
                else
                  echo "⚠️ No official bin found for $gen_bin"
                fi
              else
                echo "❌ Failed to generate $gen_bin"
              fi
            fi
          done

      - name: Create verification summary
        run: |
          {
            echo "# Build Verification Summary"
            echo "## Build Info"
            echo "- Architecture: ${{ matrix.arch }}"
            echo "- Date: $(date)"
            
            echo -e "\n## Binary Comparison Results"
            for bin in *.BIN; do
              [ -f "$bin" ] || continue
              echo "### $bin"
              if [ -f "profiling_materials/official_bins/$bin" ]; then
                if cmp -s "$bin" "profiling_materials/official_bins/$bin"; then
                  echo "✅ Matches official binary"
                else
                  echo "❌ Differs from official binary"
                  echo "\`\`\`"
                  cmp "$bin" "profiling_materials/official_bins/$bin" || true
                  echo "\`\`\`"
                fi
              else
                echo "⚠️ No official binary found for comparison"
              fi
            done
          } > verification_summary-${{ matrix.arch }}.md

      - name: Create artifact name
        id: artifact-name
        run: |
          echo "name=asm53b-macos-${{ matrix.arch }}" >> $GITHUB_OUTPUT

      - name: Package binary and verification results
        run: |
          strip asm53b.${{ matrix.arch }}
          tar czf "${{ steps.artifact-name.outputs.name }}.tar.gz" asm53b.${{ matrix.arch }} *.BIN *.LST
          shasum -a 256 "${{ steps.artifact-name.outputs.name }}.tar.gz" > "${{ steps.artifact-name.outputs.name }}.tar.gz.sha256"

      - name: Upload single architecture artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.name }}
          path: |
            ${{ steps.artifact-name.outputs.name }}.tar.gz
            ${{ steps.artifact-name.outputs.name }}.tar.gz.sha256
            verification_summary-${{ matrix.arch }}.md
            asm53b.${{ matrix.arch }}
            *.BIN
            *.LST

  create-universal-binary:
    needs: build-macos
    runs-on: macos-latest
    
    steps:
      - name: Download x86_64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: asm53b-macos-x86_64
          
      - name: Download arm64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: asm53b-macos-arm64
          
      - name: Create Universal Binary
        run: |
          # Create Universal Binary
          lipo -create -output asm53b.universal asm53b.x86_64 asm53b.arm64
          
          echo "Universal Binary architectures:"
          lipo -info asm53b.universal
          
          # Concat Summary
          {
            echo "# Universal Binary Build Verification Summary"
            echo "## Build Info"
            echo "- Type: Universal Binary (x86_64 + arm64)"
            echo "- Date: $(date)"
            echo
            echo "## Architectures"
            echo "\`\`\`"
            lipo -info asm53b.universal
            echo "\`\`\`"
            echo
            echo "## Individual Architecture Reports"
            echo "### x86_64"
            cat verification_summary-x86_64.md
            echo
            echo "### arm64"
            cat verification_summary-arm64.md
          } > verification_summary-universal.md
          
          # prepare redist
          strip asm53b.universal
          mv asm53b.universal asm53b
          
          # where BIN and LST comes from?
          tar czf asm53b-macos-universal.tar.gz asm53b *.BIN *.LST
          shasum -a 256 asm53b-macos-universal.tar.gz > asm53b-macos-universal.tar.gz.sha256

      - name: Upload Universal Binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: asm53b-macos-universal
          path: |
            asm53b-macos-universal.tar.gz
            asm53b-macos-universal.tar.gz.sha256
            verification_summary-universal.md
            asm53b